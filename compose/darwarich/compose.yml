services:
  # Redis
  redis:
    image: redis:7.4-alpine
    command: redis-server
    volumes:
      - ${DAWARICH_HOME}/shared:/var/shared/redis
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  # Database
  postgres:
    image: postgis/postgis:17-3.5-alpine
    shm_size: 1G
    volumes:
      - ${DAWARICH_HOME}/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DAWARICH_DATABASE_USER}
      POSTGRES_PASSWORD: ${DAWARICH_DATABASE_PASS}
      POSTGRES_DB: ${DAWARICH_DATABASE_DB}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  # Application
  app:
    image: freikin/dawarich:latest
    volumes:
      - ${DAWARICH_HOME}/public:/var/app/public
      - ${DAWARICH_HOME}/watched:/var/app/tmp/imports/watched
      - ${DAWARICH_HOME}/storage:/var/app/storage
    ports:
      - 3000:3000
      - 9394:9394
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    restart: on-failure
    environment:
      RAILS_ENV: production
      REDIS_URL: redis://redis:6379/0
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${DAWARICH_DATABASE_USER}
      DATABASE_PASSWORD: ${DAWARICH_DATABASE_PASS}
      DATABASE_NAME: ${DAWARICH_DATABASE_DB}
      SECRET_KEY_BASE: ${DAWARICH_SECRET_KEY_BASE}
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOSTS: localhost,::1,127.0.0.1,${DAWARICH_HOST}
      TIME_ZONE: ${DAWARICH_TIMEZONE}
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      RAILS_LOG_TO_STDOUT: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    labels:
      traefik.enable: true
      traefik.http.services.dawarich.loadbalancer.server.port: 3000
      traefik.http.routers.dawarich.rule: Host(`$DAWARICH_HOST`)
      traefik.http.routers.dawarich.entrypoints: https
      traefik.http.routers.dawarich.middlewares: local-whitelist

  # Sidekiq
  sidekiq:
    image: freikin/dawarich:latest
    volumes:
      - ${DAWARICH_HOME}/public:/var/app/public
      - ${DAWARICH_HOME}/watched:/var/app/tmp/imports/watched
      - ${DAWARICH_HOME}/storage:/var/app/storage
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ['bundle', 'exec', 'sidekiq']
    restart: on-failure
    environment:
      RAILS_ENV: production
      REDIS_URL: redis://redis:6379/0
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${DAWARICH_DATABASE_USER}
      DATABASE_PASSWORD: ${DAWARICH_DATABASE_PASS}
      DATABASE_NAME: ${DAWARICH_DATABASE_DB}
      SECRET_KEY_BASE: ${DAWARICH_SECRET_KEY_BASE}
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_HOSTS: localhost,::1,127.0.0.1,${DAWARICH_HOST}
      TIME_ZONE: ${DAWARICH_TIMEZONE}
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      RAILS_LOG_TO_STDOUT: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "bundle exec sidekiqmon processes | grep $${HOSTNAME}" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
      app:
        condition: service_healthy
        restart: true
