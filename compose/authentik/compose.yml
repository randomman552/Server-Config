version: '3'
services:
  # Authentik database and cache
  postgres:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ${AUTHENTIK_HOME}/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${AUTHENTIK_PG_PASS:?database password required}
      - POSTGRES_USER=${AUTHENTIK_PG_USER:-authentik}
      - POSTGRES_DB=${AUTHENTIK_PG_DB:-authentik}
  
  # Periodic database backups
  postgres-backup:
    image: prodrigestivill/postgres-backup-local:alpine
    restart: unless-stopped
    user: postgres:postgres
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_HOST: postgres
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - ${AUTHENTIK_HOME}/backups:/backups
    depends_on:
      - postgres

  # Redis cache
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${AUTHENTIK_HOME}/redis:/data
  
  # Authentik server and worker
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.12.0}
    restart: unless-stopped
    command: server
    depends_on:
      - postgres
      - redis
    ports:
      - 9000:9000
    environment:
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
      AUTHENTIK_COOKIE_DOMAIN: $AUTHENTIK_COOKIE_DOMAIN
      # Connection settings
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      # Email settings
      AUTHENTIK_EMAIL__HOST: $AUTHENTIK_EMAIL__HOST
      AUTHENTIK_EMAIL__PORT: $AUTHENTIK_EMAIL__PORT
      AUTHENTIK_EMAIL__USERNAME: $AUTHENTIK_EMAIL__USERNAME
      AUTHENTIK_EMAIL__PASSWORD: $AUTHENTIK_EMAIL__PASSWORD
      AUTHENTIK_EMAIL__FROM: $AUTHENTIK_EMAIL__FROM
      AUTHENTIK_EMAIL__USE_TLS: true
    volumes:
      - ${AUTHENTIK_HOME}/media:/media
      - ${AUTHENTIK_HOME}/custom-templates:/templates
    labels:
      traefik.enable: true
      
      # Normal server traffic
      traefik.http.services.authentik.loadbalancer.server.port: 9000
      traefik.http.routers.authentik.rule: Host(`$AUTHENTIK_HOST`)
      traefik.http.routers.authentik.entrypoints: https
      traefik.http.routers.authentik.service: authentik
      
      # Embedded proxy outpost
      traefik.http.services.authentik-proxy-outpost.loadbalancer.server.port: 9000
      traefik.http.routers.authentik-proxy-outpost.rule: HostRegexp(`{subdomain:[a-z0-9-]+}.$AUTHENTIK_COOKIE_DOMAIN`) && PathPrefix(`/outpost.goauthentik.io/`)
      traefik.http.routers.authentik-proxy-outpost.entrypoints: https
      traefik.http.routers.authentik-proxy-outpost.service: authentik-proxy-outpost
      
      # Middleware for forward auth
      traefik.http.middlewares.authentik-forwardauth.forwardauth.address: http://$DOMAIN:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik-forwardauth.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authentik-forwardauth.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
      
      # Add to homepage
      homepage.group: $HOMEPAGE_GROUP
      homepage.name: Authentik
      homepage.icon: authentik
      homepage.description: Authentication provider
      homepage.href: https://$AUTHENTIK_HOST
      homepage.widget.type: authentik
      homepage.widget.url: https://$AUTHENTIK_HOST
      homepage.widget.key: $HOMEPAGE_AUTHENTIK_KEY

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.12.0}
    restart: unless-stopped
    command: worker
    depends_on:
      - postgres
      - redis
      - server
    environment:
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
      AUTHENTIK_COOKIE_DOMAIN: $AUTHENTIK_COOKIE_DOMAIN
      # Connection settings
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      # Email settings
      AUTHENTIK_EMAIL__HOST: $AUTHENTIK_EMAIL__HOST
      AUTHENTIK_EMAIL__PORT: $AUTHENTIK_EMAIL__PORT
      AUTHENTIK_EMAIL__USERNAME: $AUTHENTIK_EMAIL__USERNAME
      AUTHENTIK_EMAIL__PASSWORD: $AUTHENTIK_EMAIL__PASSWORD
      AUTHENTIK_EMAIL__FROM: $AUTHENTIK_EMAIL__FROM
      AUTHENTIK_EMAIL__USE_TLS: true
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${AUTHENTIK_HOME}/media:/media
      - ${AUTHENTIK_HOME}/certs:/certs
      - ${AUTHENTIK_HOME}/custom-templates:/templates
